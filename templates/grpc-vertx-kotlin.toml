description = "gRPC over Vert.x, with a client, a server and a protobuf sub-project"

[args]
targetJvm = { default = "11" }
wrapper = { description = "Gradle wrapper version", default = "7.3.3" }
kotlin = { description = "Kotlin version", default = "1.6.21" }
protobufPlugin = { description = "Protobuf Plugin (com.google.protobuf) version", default = "0.8.18" }
shadow = { description = "Shadow Plugin (com.github.johnrengelman.shadow) version", default = "7.0.0" }
vertx = { description = "Vert.x version", default = "4.3.2" }
junitJupiter = { description = "junitJupiter version", default = "5.7.0" }
grpc = { description = "gRPC version", default = "1.44.0" }
grpcKotlin = { description = "gRPC Kotlin (io.grpc:grpc-kotlin-stub) version", default = "1.2.1" }
protobuf = { description = "Protobuf version", default = "3.19.2" }

[[files]]
path = "$(artifact)-protos/build.gradle.kts"
content = """plugins {
    `java-library`
}

java {
    sourceSets.getByName("main").resources.srcDir("src/main/proto")
}
"""

[[files]]
path = "$(artifact)-protos/src/main/proto/$(packagePath)/greeting.proto"
content = """syntax = "proto3";

option java_multiple_files = true;
option java_package = "$(package)";
option java_outer_classname = "GreetingProto";

package greeting;

service GreetingService {
    rpc Greet(GreetRequest) returns (GreetResponse) {}
}

message GreetRequest {
    string name = 1;
}

message GreetResponse {
  string message = 1;
}
"""

[[files]]
path = "$(artifact)-server/build.gradle.kts"
content = """import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.tasks.testing.logging.TestLogEvent.*
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    kotlin("jvm")
    application
    id("com.github.johnrengelman.shadow")
}

repositories {
    mavenCentral()
}

val mainVerticleName = "$(package).MainVerticle"
val launcherClassName = "io.vertx.core.Launcher"

val watchForChange = "src/**/*"
val doOnChange = "${projectDir}/gradlew classes"

application {
    mainClass.set(launcherClassName)
}

dependencies {
    implementation(project(":$(artifact)-stub"))
    implementation(platform("io.vertx:vertx-stack-depchain:${Versions.vertx}"))
    implementation("io.vertx:vertx-grpc")
    implementation("io.vertx:vertx-lang-kotlin-coroutines")
    testImplementation("io.vertx:vertx-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter:${Versions.junitJupiter}")
}

val compileKotlin: KotlinCompile by tasks
compileKotlin.kotlinOptions.jvmTarget = "$(targetJvm)"

java {
    sourceCompatibility = JavaVersion.VERSION_$(targetJvmJava)
    targetCompatibility = JavaVersion.VERSION_$(targetJvmJava)
}

tasks.withType<ShadowJar> {
    archiveClassifier.set("fat")
    manifest {
        attributes(mapOf("Main-Verticle" to mainVerticleName))
    }
    mergeServiceFiles()
}

tasks.withType<Test> {
    useJUnitPlatform()
    testLogging {
        events = setOf(PASSED, SKIPPED, FAILED)
    }
}

tasks.withType<JavaExec> {
    args = listOf(
        "run",
        mainVerticleName,
        "--redeploy=$watchForChange",
        "--launcher-class=$launcherClassName",
        "--on-redeploy=$doOnChange"
    )
}
"""

[[files]]
path = "$(artifact)-server/src/test/kotlin/$(packagePath)/TestMainVerticle.kt"
content = """package $(package)

import $(package).MainVerticle
import io.vertx.core.Vertx
import io.vertx.junit5.VertxExtension
import io.vertx.junit5.VertxTestContext
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith

@ExtendWith(VertxExtension::class)
class TestMainVerticle {

    @BeforeEach
    fun deployVerticle(vertx: Vertx, testContext: VertxTestContext) {
        vertx.deployVerticle(MainVerticle(), testContext.succeeding<String> { _ -> testContext.completeNow() })
    }

    @Test
    fun verticleDeployed(vertx: Vertx, testContext: VertxTestContext) {
        testContext.completeNow()
    }
}
"""

[[files]]
path = "$(artifact)-server/src/main/kotlin/$(packagePath)/GreetingServiceImpl.kt"
content = """package $(package)

class GreetingServiceImpl : GreetingServiceGrpcKt.GreetingServiceCoroutineImplBase() {
    override suspend fun greet(request: GreetRequest): GreetResponse =
        GreetResponse.newBuilder()
            .setMessage("Hello, ${request.name}")
            .build()
}"""

[[files]]
path = "$(artifact)-server/src/main/kotlin/$(packagePath)/MainVerticle.kt"
content = """package $(package)

import io.vertx.core.AbstractVerticle
import io.vertx.core.Promise
import io.vertx.grpc.VertxServerBuilder

class MainVerticle : AbstractVerticle() {

    override fun start(startPromise: Promise<Void>) {
        val rpcServer = VertxServerBuilder
            .forAddress(vertx, "localhost", 8080)
            .addService(GreetingServiceImpl())
            .build()
        rpcServer.start(startPromise)
    }
}
"""

[[files]]
path = "gradle/wrapper/gradle-wrapper.properties"
content = """distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\\://services.gradle.org/distributions/gradle-$(wrapper)-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
"""

[[files]]
path = "buildSrc/build.gradle.kts"
content = """plugins {
    `kotlin-dsl`
}

repositories {
    mavenCentral()
}
"""

[[files]]
path = "buildSrc/settings.gradle.kts"
content = """rootProject.name = "buildSrc"
"""

[[files]]
path = "buildSrc/src/main/kotlin/Versions.kt"
content = """object Versions {
    const val kotlin = "$(kotlin)"
    const val protobufPlugin = "$(protobufPlugin)"
    const val shadow = "$(shadow)"
    const val vertx = "$(vertx)"
    const val junitJupiter = "$(junitJupiter)"
    const val grpc = "$(grpc)"
    const val grpcKotlin = "$(grpcKotlin)"
    const val protobuf = "$(protobuf)"
}"""

[[files]]
path = "build.gradle.kts"
content = """plugins {
    id("com.google.protobuf") version Versions.protobufPlugin apply false
    kotlin("jvm") version Versions.kotlin apply false
    id("com.github.johnrengelman.shadow") version Versions.shadow apply false
}

group = "$(group)"
version = "$(version)"

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
}
"""

[[files]]
path = "$(artifact)-stub/build.gradle.kts"
content = """import com.google.protobuf.gradle.generateProtoTasks
import com.google.protobuf.gradle.id
import com.google.protobuf.gradle.plugins
import com.google.protobuf.gradle.protobuf
import com.google.protobuf.gradle.protoc

plugins {
    kotlin("jvm")
    id("com.google.protobuf")
}

dependencies {
    protobuf(project(":$(artifact)-protos"))

    api("io.grpc:grpc-stub:${Versions.grpc}")
    api("io.grpc:grpc-protobuf:${Versions.grpc}")
    api("io.grpc:grpc-kotlin-stub:${Versions.grpcKotlin}")
    api("com.google.protobuf:protobuf-kotlin:${Versions.protobuf}")
    api("com.google.protobuf:protobuf-java-util:${Versions.protobuf}")
}

// Makes IntelliJ IDEA happy.
sourceSets {
    val main by getting { }
    main.java.srcDirs("build/generated/source/proto/main/java")
    main.java.srcDirs("build/generated/source/proto/main/grpc")
    main.java.srcDirs("build/generated/source/proto/main/kotlin")
    main.java.srcDirs("build/generated/source/proto/main/grpckt")
}

java {
    sourceCompatibility = JavaVersion.VERSION_$(targetJvmJava)
    targetCompatibility = JavaVersion.VERSION_$(targetJvmJava)
}

tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile>().all {
    kotlinOptions {
        freeCompilerArgs = listOf("-Xopt-in=kotlin.RequiresOptIn")
        jvmTarget = "$(targetJvm)"
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${Versions.protobuf}"
    }
    plugins {
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:${Versions.grpc}"
        }
        id("grpckt") {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:${Versions.grpcKotlin}:jdk7@jar"
        }
    }
    generateProtoTasks {
        all().forEach {
            it.builtins {
                id("kotlin")
            }
            it.plugins {
                id("grpc")
                id("grpckt")
            }
        }
    }
}"""

[[files]]
path = "settings.gradle.kts"
content = """rootProject.name = "$(artifact)"

pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
    }
}

include("$(artifact)-stub", "$(artifact)-protos", "$(artifact)-client", "$(artifact)-server")

// https://twitter.com/Louis_CAD/status/1498270951175299080?s=20&t=uv0XxtYQzbktJTcpvnJ6Wg
rootDir.resolve("gradle.properties").copyTo(
    target = rootDir.resolve("buildSrc/gradle.properties"),
    overwrite = true,
)
"""

[[files]]
path = "gradle.properties"
content = """kotlin.code.style=official"""

[[files]]
path = "$(artifact)-client/build.gradle.kts"
content = """import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.gradle.api.tasks.testing.logging.TestLogEvent.*
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    kotlin("jvm")
    application
    id("com.github.johnrengelman.shadow")
}

repositories {
    mavenCentral()
}

val mainVerticleName = "$(package).MainVerticle" // TODO: point to your vericle path
val launcherClassName = "io.vertx.core.Launcher"

val watchForChange = "src/**/*"
val doOnChange = "$projectDir/gradlew classes"

application {
    mainClass.set(launcherClassName)
}

dependencies {
    implementation(platform("io.vertx:vertx-stack-depchain:${Versions.vertx}"))
    implementation("io.vertx:vertx-grpc")
    implementation("io.vertx:vertx-lang-kotlin-coroutines")
    implementation(project(":$(artifact)-stub"))
    testImplementation("io.vertx:vertx-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter:${Versions.junitJupiter}")
}

val compileKotlin: KotlinCompile by tasks
compileKotlin.kotlinOptions.jvmTarget = "$(targetJvm)"

java {
    sourceCompatibility = JavaVersion.VERSION_$(targetJvmJava)
    targetCompatibility = JavaVersion.VERSION_$(targetJvmJava)
}

tasks.withType<ShadowJar> {
    archiveClassifier.set("fat")
    manifest {
        attributes(mapOf("Main-Verticle" to mainVerticleName))
    }
    mergeServiceFiles()
}

tasks.withType<Test> {
    useJUnitPlatform()
    testLogging {
        events = setOf(PASSED, SKIPPED, FAILED)
    }
}

tasks.withType<JavaExec> {
    args = listOf(
        "run",
        mainVerticleName,
        "--redeploy=$watchForChange",
        "--launcher-class=$launcherClassName",
        "--on-redeploy=$doOnChange"
    )
}
"""

[[files]]
path = "$(artifact)-client/src/test/kotlin/$(packagePath)/TestMainVerticle.kt"
content = """package $(package)

import io.vertx.core.Vertx
import io.vertx.junit5.VertxExtension
import io.vertx.junit5.VertxTestContext
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.extension.ExtendWith
import $(package).MainVerticle

@ExtendWith(VertxExtension::class)
class TestMainVerticle {

    @BeforeEach
    fun deployVerticle(vertx: Vertx, testContext: VertxTestContext) {
        vertx.deployVerticle(MainVerticle(), testContext.succeeding<String> { _ -> testContext.completeNow() })
    }

    @Test
    fun verticleDeployed(vertx: Vertx, testContext: VertxTestContext) {
        testContext.completeNow()
    }
}
"""

[[files]]
path = "$(artifact)-client/src/main/kotlin/$(packagePath)/MainVerticle.kt"
content = """package $(package)

import io.vertx.grpc.VertxChannelBuilder
import io.vertx.kotlin.coroutines.CoroutineVerticle

class MainVerticle : CoroutineVerticle() {
    override suspend fun start() {
        val channel = VertxChannelBuilder
            .forAddress(vertx, "localhost", 8080)
            .usePlaintext()
            .build()

        val stub = GreetingServiceGrpcKt.GreetingServiceCoroutineStub(channel)
        val name = "World"

        val resp = stub.greet(GreetRequest.newBuilder().setName(name).build())
        println(resp.message)
    }
}
"""
